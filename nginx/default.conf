upstream hubble-api {
    server                  hubble-api:3000;
}

server {
    listen                  80;

    location / {
        return              301 https://$host$request_uri;
    }
}

server {
    listen                  443 ssl;

    # This is the server SSL certificate
    ssl_certificate         /etc/ssl/server.crt;
    
    # This is the server certificate key
    ssl_certificate_key     /etc/ssl/server.key;
    
    ssl_protocols           TLSv1.2 TLSv1.3;
    ssl_ciphers             HIGH:!aNULL:!MD5;

    # Important: 
    # This is the CA cert against which the client/user will be validated
    # In our case since the Server and the Client certificate is 
    # generated from the same CA, we use the ca.crt 
    # But in actual production, the Client certificate might be 
    # created from a different CA
    ssl_client_certificate  /etc/nginx/client_certs/ca.crt;
    
    # Enables mutual TLS/two way SSL to verify the client
    # You may choose to make client verification optional so your application can return a 403 message:
    ssl_verify_client       optional;
    # ssl_verify_client       on;

    # Number of intermediate certificates to verify. Good explanation of 
    # certificate chaining can be found at
    # https://cheapsslsecurity.com/p/what-is-ssl-certificate-chain/
    ssl_verify_depth        2;
    
    # Any error during the connection can be found on the following path
    error_log /var/log/nginx/error.log debug;

    location /protected {
        if ($ssl_client_verify != SUCCESS) { return 403; }

        proxy_set_header     SSL_Client_Issuer $ssl_client_i_dn;
        proxy_set_header     SSL_Client $ssl_client_s_dn;
        proxy_set_header     SSL_Client_Verify $ssl_client_verify;

        proxy_pass           http://hubble-api;
    }

    location / {
        proxy_pass           http://hubble-api;
    }
}